//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "Delegate.h"
#include "ClassType.h"
#include "EnumType.h"
#include "TypeAlias.h"
#include "Variant.h"
#include "SubclassInvoker.h"

namespace idlcpp
{

	class __pafcore__CallBack_Type : public ::pafcore::ClassType
	{
	public:
		__pafcore__CallBack_Type();
	public:
		virtual void destroyInstance(void* address);
		virtual void destroyArray(void* address);
		virtual bool assign(void* dst, const void* src);
	public:
		PAFCORE_EXPORT static __pafcore__CallBack_Type* GetSingleton();
	};

	class __pafcore__FunctionCallBack_Type : public ::pafcore::ClassType
	{
	public:
		__pafcore__FunctionCallBack_Type();
	public:
		virtual void destroyInstance(void* address);
		virtual void destroyArray(void* address);
		virtual bool assign(void* dst, const void* src);
	public:
		PAFCORE_EXPORT static __pafcore__FunctionCallBack_Type* GetSingleton();
	};

	class __pafcore__InstanceMethodCallBack_Type : public ::pafcore::ClassType
	{
	public:
		__pafcore__InstanceMethodCallBack_Type();
	public:
		virtual void destroyInstance(void* address);
		virtual void destroyArray(void* address);
		virtual bool assign(void* dst, const void* src);
	public:
		PAFCORE_EXPORT static __pafcore__InstanceMethodCallBack_Type* GetSingleton();
	};

	class __pafcore__StaticMethodCallBack_Type : public ::pafcore::ClassType
	{
	public:
		__pafcore__StaticMethodCallBack_Type();
	public:
		virtual void destroyInstance(void* address);
		virtual void destroyArray(void* address);
		virtual bool assign(void* dst, const void* src);
	public:
		PAFCORE_EXPORT static __pafcore__StaticMethodCallBack_Type* GetSingleton();
	};

	class __pafcore__Delegate_Type : public ::pafcore::ClassType
	{
	public:
		__pafcore__Delegate_Type();
	public:
		virtual void destroyInstance(void* address);
		virtual void destroyArray(void* address);
		virtual bool assign(void* dst, const void* src);
	public:
		static ::pafcore::ErrorCode Delegate_addCallBack(::pafcore::Variant* result, ::pafcore::Variant** args, int numArgs);
		static ::pafcore::ErrorCode Delegate_addInstanceMethod(::pafcore::Variant* result, ::pafcore::Variant** args, int numArgs);
		static ::pafcore::ErrorCode Delegate_addStaticMethod(::pafcore::Variant* result, ::pafcore::Variant** args, int numArgs);
		static ::pafcore::ErrorCode Delegate_removeCallBack(::pafcore::Variant* result, ::pafcore::Variant** args, int numArgs);
		static ::pafcore::ErrorCode Delegate_removeInstanceMethod(::pafcore::Variant* result, ::pafcore::Variant** args, int numArgs);
		static ::pafcore::ErrorCode Delegate_removeStaticMethod(::pafcore::Variant* result, ::pafcore::Variant** args, int numArgs);
	public:
		PAFCORE_EXPORT static __pafcore__Delegate_Type* GetSingleton();
	};

	class __pafcore__EventHandler_Type : public ::pafcore::ClassType
	{
	public:
		__pafcore__EventHandler_Type();
	public:
		virtual void destroyInstance(void* address);
		virtual void destroyArray(void* address);
		virtual bool assign(void* dst, const void* src);
	public:
		static ::pafcore::ErrorCode EventHandler_invoke(::pafcore::Variant* result, ::pafcore::Variant** args, int numArgs);
	public:
		PAFCORE_EXPORT static __pafcore__EventHandler_Type* GetSingleton();
	};

}

template<>
struct RuntimeTypeOf<::pafcore::CallBack>
{
	typedef ::idlcpp::__pafcore__CallBack_Type RuntimeType;
	enum {type_category = ::pafcore::reference_object};
};

template<>
struct RuntimeTypeOf<::pafcore::FunctionCallBack>
{
	typedef ::idlcpp::__pafcore__FunctionCallBack_Type RuntimeType;
	enum {type_category = ::pafcore::reference_object};
};

template<>
struct RuntimeTypeOf<::pafcore::InstanceMethodCallBack>
{
	typedef ::idlcpp::__pafcore__InstanceMethodCallBack_Type RuntimeType;
	enum {type_category = ::pafcore::reference_object};
};

template<>
struct RuntimeTypeOf<::pafcore::StaticMethodCallBack>
{
	typedef ::idlcpp::__pafcore__StaticMethodCallBack_Type RuntimeType;
	enum {type_category = ::pafcore::reference_object};
};

template<>
struct RuntimeTypeOf<::pafcore::Delegate>
{
	typedef ::idlcpp::__pafcore__Delegate_Type RuntimeType;
	enum {type_category = ::pafcore::value_object};
};

template<>
struct RuntimeTypeOf<::pafcore::EventHandler>
{
	typedef ::idlcpp::__pafcore__EventHandler_Type RuntimeType;
	enum {type_category = ::pafcore::value_object};
};

