//DO NOT EDIT THIS FILE, it is generated by idlcpp
//http://www.idlcpp.org

#pragma once

#include "EnumType.h"
#include "ClassType.h"
#include "EnumType.h"
#include "TypeAlias.h"
#include "Variant.h"
#include "SubclassInvoker.h"

namespace idlcpp
{

	class __pafcore__EnumType_Type : public ::pafcore::ClassType
	{
	public:
		__pafcore__EnumType_Type();
	public:
		virtual void destroyInstance(void* address);
		virtual void destroyArray(void* address);
		virtual bool assign(void* dst, const void* src);
	public:
		static ::pafcore::ErrorCode EnumType__getEnumeratorByName_(::pafcore::Variant* result, ::pafcore::Variant** args, int numArgs);
		static ::pafcore::ErrorCode EnumType__getEnumeratorByValue_(::pafcore::Variant* result, ::pafcore::Variant** args, int numArgs);
		static ::pafcore::ErrorCode EnumType__getEnumeratorCount_(::pafcore::Variant* result, ::pafcore::Variant** args, int numArgs);
		static ::pafcore::ErrorCode EnumType__getEnumerator_(::pafcore::Variant* result, ::pafcore::Variant** args, int numArgs);
	public:
		PAFCORE_EXPORT static __pafcore__EnumType_Type* GetSingleton();
	};

}

template<>
struct RuntimeTypeOf<::pafcore::EnumType>
{
	typedef ::idlcpp::__pafcore__EnumType_Type RuntimeType;
	enum {type_category = ::pafcore::reference_object};
};

